"""
This module asserts that the payloads generated by wal2json are consistent.

This is run by tox in all combinations of supported python and postgresql versions.
"""

import logging
from pprint import pprint

from psycopg2.extensions import connection as Connection

from tests.utils import DbActivitySimulator, DbStreamConsumer

logger = logging.getLogger(__name__)


def test_crud_on_table_without_pk(conn: Connection, conn2: Connection, drop_slot, table_name: str):
    statements = [
        ("INSERT INTO {table_name} (NAME) VALUES ('this-is-the-value-1')", []),
        ("INSERT INTO {table_name} (NAME) VALUES ('this-is-the-value-2')", []),
        ("INSERT INTO {table_name} (NAME) VALUES ('this-is-the-value-3')", []),
        ("INSERT INTO {table_name} (NAME) VALUES ('this-is-the-value-4')", []),
        ("UPDATE {table_name} SET NAME = 'this-is-the-value-4-new' WHERE NAME = 'this-is-the-value-4'", []),
    ]
    # https://github.com/eulerto/wal2json?tab=readme-ov-file
    options = {"format-version": "2"}

    create_table = f"""
    CREATE TABLE {table_name} (
        name varchar not null
    )
    """

    db_activity_simulator = DbActivitySimulator(conn, table_name, statements, create_table_ddl=create_table)
    db_stream_consumer = DbStreamConsumer(conn2, options=options)

    db_stream_consumer.start_replication().start()
    db_activity_simulator.start()
    db_activity_simulator.join_or_fail(timeout=3)

    db_stream_consumer.join_or_fail(timeout=3)

    pprint(db_stream_consumer.payloads_parsed, indent=4, sort_dicts=True, compact=False)

    expected = [
        {"action": "B"},
        {"action": "C"},
        {"action": "B"},
        {
            "action": "I",
            "columns": [{"name": "name", "type": "character varying", "value": "this-is-the-value-1"}],
            "schema": "public",
            "table": table_name.lower(),
        },
        {"action": "C"},
        {"action": "B"},
        {
            "action": "I",
            "columns": [{"name": "name", "type": "character varying", "value": "this-is-the-value-2"}],
            "schema": "public",
            "table": table_name.lower(),
        },
        {"action": "C"},
        {"action": "B"},
        {
            "action": "I",
            "columns": [{"name": "name", "type": "character varying", "value": "this-is-the-value-3"}],
            "schema": "public",
            "table": table_name.lower(),
        },
        {"action": "C"},
        {"action": "B"},
        {
            "action": "I",
            "columns": [{"name": "name", "type": "character varying", "value": "this-is-the-value-4"}],
            "schema": "public",
            "table": table_name.lower(),
        },
        {"action": "C"},
        {"action": "B"},
        {"action": "C"},
    ]

    assert db_stream_consumer.payloads_parsed == expected


def test_crud_on_table_with_pk(conn: Connection, conn2: Connection, drop_slot, table_name: str):
    statements = [
        ("INSERT INTO {table_name} (NAME) VALUES ('this-is-the-value-1')", []),
        ("INSERT INTO {table_name} (NAME) VALUES ('this-is-the-value-2')", []),
        ("INSERT INTO {table_name} (PK, NAME) VALUES (98, 'this-is-the-value-3')", []),
        ("INSERT INTO {table_name} (PK, NAME) VALUES (99, 'this-is-the-value-4')", []),
        ("UPDATE {table_name} SET NAME = 'this-is-the-value-3-new' WHERE PK = 98", []),
        ("UPDATE {table_name} SET NAME = 'this-is-the-value-4-new' WHERE NAME = 'this-is-the-value-4'", []),
    ]
    # https://github.com/eulerto/wal2json?tab=readme-ov-file
    options = {"format-version": "2"}

    create_table = f"""
    CREATE TABLE {table_name} (
        pk serial not null primary key,
        name varchar not null
    )
    """

    db_activity_simulator = DbActivitySimulator(conn, table_name, statements, create_table_ddl=create_table)
    db_stream_consumer = DbStreamConsumer(conn2, options=options)

    db_stream_consumer.start_replication().start()
    db_activity_simulator.start()
    db_activity_simulator.join_or_fail(timeout=3)

    db_stream_consumer.join_or_fail(timeout=3)

    pprint(db_stream_consumer.payloads_parsed, indent=4, sort_dicts=True, compact=False)

    expected = [
        {"action": "B"},
        {"action": "C"},
        {"action": "B"},
        {
            "action": "I",
            "columns": [
                {"name": "pk", "type": "integer", "value": 1},
                {"name": "name", "type": "character varying", "value": "this-is-the-value-1"},
            ],
            "schema": "public",
            "table": table_name.lower(),
        },
        {"action": "C"},
        {"action": "B"},
        {
            "action": "I",
            "columns": [
                {"name": "pk", "type": "integer", "value": 2},
                {"name": "name", "type": "character varying", "value": "this-is-the-value-2"},
            ],
            "schema": "public",
            "table": table_name.lower(),
        },
        {"action": "C"},
        {"action": "B"},
        {
            "action": "I",
            "columns": [
                {"name": "pk", "type": "integer", "value": 98},
                {"name": "name", "type": "character varying", "value": "this-is-the-value-3"},
            ],
            "schema": "public",
            "table": table_name.lower(),
        },
        {"action": "C"},
        {"action": "B"},
        {
            "action": "I",
            "columns": [
                {"name": "pk", "type": "integer", "value": 99},
                {"name": "name", "type": "character varying", "value": "this-is-the-value-4"},
            ],
            "schema": "public",
            "table": table_name.lower(),
        },
        {"action": "C"},
        {"action": "B"},
        {
            "action": "U",
            "columns": [
                {"name": "pk", "type": "integer", "value": 98},
                {"name": "name", "type": "character varying", "value": "this-is-the-value-3-new"},
            ],
            "identity": [{"name": "pk", "type": "integer", "value": 98}],
            "schema": "public",
            "table": table_name.lower(),
        },
        {"action": "C"},
        {"action": "B"},
        {
            "action": "U",
            "columns": [
                {"name": "pk", "type": "integer", "value": 99},
                {"name": "name", "type": "character varying", "value": "this-is-the-value-4-new"},
            ],
            "identity": [{"name": "pk", "type": "integer", "value": 99}],
            "schema": "public",
            "table": table_name.lower(),
        },
        {"action": "C"},
    ]

    assert db_stream_consumer.payloads_parsed == expected
