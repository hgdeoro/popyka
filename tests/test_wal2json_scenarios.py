"""
This module asserts that the payloads generated by wal2json are consistent.

This is run by tox in all combinations of supported python and postgresql versions.
"""

import dataclasses
import logging
import uuid
from pprint import pprint

import pytest
from psycopg2.extensions import connection as Connection

from tests.utils.db_activity_simulator import DbActivitySimulator, DbStreamConsumer

logger = logging.getLogger(__name__)


def test_crud_on_table_without_pk(conn: Connection, conn2: Connection, drop_slot, table_name: str):
    statements = [
        "INSERT INTO __table_name__ (NAME) VALUES ('this-is-the-value-1')",
        "INSERT INTO __table_name__ (NAME) VALUES ('this-is-the-value-2')",
        "INSERT INTO __table_name__ (NAME) VALUES ('this-is-the-value-3')",
        "INSERT INTO __table_name__ (NAME) VALUES ('this-is-the-value-4')",
        "UPDATE __table_name__ SET NAME = 'this-is-the-value-4-new' WHERE NAME = 'this-is-the-value-4'",
        "DELETE FROM __table_name__ WHERE NAME = 'this-is-the-value-4-new'",
    ]

    create_table = f"""
    CREATE TABLE {table_name} (
        name varchar not null
    )
    """

    db_activity_simulator = DbActivitySimulator(conn, table_name, statements, create_table_ddl=create_table)
    db_stream_consumer = DbStreamConsumer(conn2)

    db_stream_consumer.start_replication().start()
    db_activity_simulator.start()
    db_activity_simulator.join_or_fail(timeout=3)

    db_stream_consumer.join_or_fail(timeout=3)

    pprint(db_stream_consumer.payloads_parsed, indent=4, sort_dicts=True, compact=False)

    expected = [
        {"action": "B"},
        {"action": "C"},
        {"action": "B"},
        {
            "action": "I",
            "columns": [{"name": "name", "type": "character varying", "value": "this-is-the-value-1"}],
            "schema": "public",
            "table": table_name.lower(),
        },
        {"action": "C"},
        {"action": "B"},
        {
            "action": "I",
            "columns": [{"name": "name", "type": "character varying", "value": "this-is-the-value-2"}],
            "schema": "public",
            "table": table_name.lower(),
        },
        {"action": "C"},
        {"action": "B"},
        {
            "action": "I",
            "columns": [{"name": "name", "type": "character varying", "value": "this-is-the-value-3"}],
            "schema": "public",
            "table": table_name.lower(),
        },
        {"action": "C"},
        {"action": "B"},
        {
            "action": "I",
            "columns": [{"name": "name", "type": "character varying", "value": "this-is-the-value-4"}],
            "schema": "public",
            "table": table_name.lower(),
        },
        {"action": "C"},
        {"action": "B"},
        {"action": "C"},
        {"action": "B"},
        {"action": "C"},
    ]

    assert db_stream_consumer.payloads_parsed == expected


def test_crud_on_table_with_pk(conn: Connection, conn2: Connection, drop_slot, table_name: str):
    statements = [
        "INSERT INTO __table_name__ (NAME) VALUES ('this-is-the-value-1')",
        "INSERT INTO __table_name__ (NAME) VALUES ('this-is-the-value-2')",
        "INSERT INTO __table_name__ (PK, NAME) VALUES (98, 'this-is-the-value-3')",
        "INSERT INTO __table_name__ (PK, NAME) VALUES (99, 'this-is-the-value-4')",
        "UPDATE __table_name__ SET NAME = 'this-is-the-value-3-new' WHERE PK = 98",
        "UPDATE __table_name__ SET NAME = 'this-is-the-value-4-new' WHERE NAME = 'this-is-the-value-4'",
        "DELETE FROM __table_name__ WHERE PK = 98",
        "DELETE FROM __table_name__ WHERE NAME = 'this-is-the-value-4-new'",
    ]

    create_table = f"""
    CREATE TABLE {table_name} (
        pk serial not null primary key,
        name varchar not null
    )
    """

    db_activity_simulator = DbActivitySimulator(conn, table_name, statements, create_table_ddl=create_table)
    db_stream_consumer = DbStreamConsumer(conn2)

    db_stream_consumer.start_replication().start()
    db_activity_simulator.start()
    db_activity_simulator.join_or_fail(timeout=3)

    db_stream_consumer.join_or_fail(timeout=3)

    pprint(db_stream_consumer.payloads_parsed, indent=4, sort_dicts=True, compact=False)

    expected = [
        {"action": "B"},
        {"action": "C"},
        {"action": "B"},
        {
            "action": "I",
            "columns": [
                {"name": "pk", "type": "integer", "value": 1},
                {"name": "name", "type": "character varying", "value": "this-is-the-value-1"},
            ],
            "schema": "public",
            "table": table_name.lower(),
        },
        {"action": "C"},
        {"action": "B"},
        {
            "action": "I",
            "columns": [
                {"name": "pk", "type": "integer", "value": 2},
                {"name": "name", "type": "character varying", "value": "this-is-the-value-2"},
            ],
            "schema": "public",
            "table": table_name.lower(),
        },
        {"action": "C"},
        {"action": "B"},
        {
            "action": "I",
            "columns": [
                {"name": "pk", "type": "integer", "value": 98},
                {"name": "name", "type": "character varying", "value": "this-is-the-value-3"},
            ],
            "schema": "public",
            "table": table_name.lower(),
        },
        {"action": "C"},
        {"action": "B"},
        {
            "action": "I",
            "columns": [
                {"name": "pk", "type": "integer", "value": 99},
                {"name": "name", "type": "character varying", "value": "this-is-the-value-4"},
            ],
            "schema": "public",
            "table": table_name.lower(),
        },
        {"action": "C"},
        {"action": "B"},
        {
            "action": "U",
            "columns": [
                {"name": "pk", "type": "integer", "value": 98},
                {"name": "name", "type": "character varying", "value": "this-is-the-value-3-new"},
            ],
            "identity": [{"name": "pk", "type": "integer", "value": 98}],
            "schema": "public",
            "table": table_name.lower(),
        },
        {"action": "C"},
        {"action": "B"},
        {
            "action": "U",
            "columns": [
                {"name": "pk", "type": "integer", "value": 99},
                {"name": "name", "type": "character varying", "value": "this-is-the-value-4-new"},
            ],
            "identity": [{"name": "pk", "type": "integer", "value": 99}],
            "schema": "public",
            "table": table_name.lower(),
        },
        {"action": "C"},
        {"action": "B"},
        {
            "action": "D",
            "identity": [{"name": "pk", "type": "integer", "value": 98}],
            "schema": "public",
            "table": table_name.lower(),
        },
        {"action": "C"},
        {"action": "B"},
        {
            "action": "D",
            "identity": [{"name": "pk", "type": "integer", "value": 99}],
            "schema": "public",
            "table": table_name.lower(),
        },
        {"action": "C"},
    ]

    assert db_stream_consumer.payloads_parsed == expected


def test_crud_on_table_with_composite_key(conn: Connection, conn2: Connection, drop_slot, table_name: str):
    statements = [
        "INSERT INTO __table_name__ (NAME) VALUES ('this-is-the-value-1')",
        "INSERT INTO __table_name__ (NAME) VALUES ('this-is-the-value-2')",
        "INSERT INTO __table_name__ (ID_1, ID_2, NAME) VALUES (98, 98, 'this-is-the-value-3')",
        "INSERT INTO __table_name__ (ID_1, ID_2, NAME) VALUES (99, 99, 'this-is-the-value-4')",
        "UPDATE __table_name__ SET NAME = 'this-is-the-value-3-new' WHERE ID_1 = 98 AND ID_2 = 98",
        "UPDATE __table_name__ SET NAME = 'this-is-the-value-4-new' WHERE NAME = 'this-is-the-value-4'",
        "DELETE FROM __table_name__ WHERE ID_1 = 98 AND ID_2 = 98",
        "DELETE FROM __table_name__ WHERE NAME = 'this-is-the-value-4-new'",
    ]

    create_table = f"""
    CREATE TABLE {table_name} (
        id_1 serial not null,
        id_2 serial not null,
        name varchar not null,
        primary key (id_1, id_2)
    )
    """

    db_activity_simulator = DbActivitySimulator(conn, table_name, statements, create_table_ddl=create_table)
    db_stream_consumer = DbStreamConsumer(conn2)

    db_stream_consumer.start_replication().start()
    db_activity_simulator.start()
    db_activity_simulator.join_or_fail(timeout=3)

    db_stream_consumer.join_or_fail(timeout=3)

    pprint(db_stream_consumer.payloads_parsed, indent=4, sort_dicts=True, compact=False)

    expected = [
        {"action": "B"},
        {"action": "C"},
        {"action": "B"},
        {
            "action": "I",
            "columns": [
                {"name": "id_1", "type": "integer", "value": 1},
                {"name": "id_2", "type": "integer", "value": 1},
                {"name": "name", "type": "character varying", "value": "this-is-the-value-1"},
            ],
            "schema": "public",
            "table": table_name.lower(),
        },
        {"action": "C"},
        {"action": "B"},
        {
            "action": "I",
            "columns": [
                {"name": "id_1", "type": "integer", "value": 2},
                {"name": "id_2", "type": "integer", "value": 2},
                {"name": "name", "type": "character varying", "value": "this-is-the-value-2"},
            ],
            "schema": "public",
            "table": table_name.lower(),
        },
        {"action": "C"},
        {"action": "B"},
        {
            "action": "I",
            "columns": [
                {"name": "id_1", "type": "integer", "value": 98},
                {"name": "id_2", "type": "integer", "value": 98},
                {"name": "name", "type": "character varying", "value": "this-is-the-value-3"},
            ],
            "schema": "public",
            "table": table_name.lower(),
        },
        {"action": "C"},
        {"action": "B"},
        {
            "action": "I",
            "columns": [
                {"name": "id_1", "type": "integer", "value": 99},
                {"name": "id_2", "type": "integer", "value": 99},
                {"name": "name", "type": "character varying", "value": "this-is-the-value-4"},
            ],
            "schema": "public",
            "table": table_name.lower(),
        },
        {"action": "C"},
        {"action": "B"},
        {
            "action": "U",
            "columns": [
                {"name": "id_1", "type": "integer", "value": 98},
                {"name": "id_2", "type": "integer", "value": 98},
                {"name": "name", "type": "character varying", "value": "this-is-the-value-3-new"},
            ],
            "identity": [
                {"name": "id_1", "type": "integer", "value": 98},
                {"name": "id_2", "type": "integer", "value": 98},
            ],
            "schema": "public",
            "table": table_name.lower(),
        },
        {"action": "C"},
        {"action": "B"},
        {
            "action": "U",
            "columns": [
                {"name": "id_1", "type": "integer", "value": 99},
                {"name": "id_2", "type": "integer", "value": 99},
                {"name": "name", "type": "character varying", "value": "this-is-the-value-4-new"},
            ],
            "identity": [
                {"name": "id_1", "type": "integer", "value": 99},
                {"name": "id_2", "type": "integer", "value": 99},
            ],
            "schema": "public",
            "table": table_name.lower(),
        },
        {"action": "C"},
        {"action": "B"},
        {
            "action": "D",
            "identity": [
                {"name": "id_1", "type": "integer", "value": 98},
                {"name": "id_2", "type": "integer", "value": 98},
            ],
            "schema": "public",
            "table": table_name.lower(),
        },
        {"action": "C"},
        {"action": "B"},
        {
            "action": "D",
            "identity": [
                {"name": "id_1", "type": "integer", "value": 99},
                {"name": "id_2", "type": "integer", "value": 99},
            ],
            "schema": "public",
            "table": table_name.lower(),
        },
        {"action": "C"},
    ]

    assert db_stream_consumer.payloads_parsed == expected


def test_truncate_table(conn: Connection, conn2: Connection, drop_slot, table_name: str):
    statements = [
        "INSERT INTO __table_name__ (NAME) VALUES ('this-is-the-value-1')",
        "INSERT INTO __table_name__ (NAME) VALUES ('this-is-the-value-2')",
        "TRUNCATE TABLE __table_name__",
        "INSERT INTO __table_name__ (NAME) VALUES ('after-truncate')",
        "DELETE FROM __table_name__",
    ]

    create_table = f"""
    CREATE TABLE {table_name} (
        pk serial not null primary key,
        name varchar not null
    )
    """

    db_activity_simulator = DbActivitySimulator(conn, table_name, statements, create_table_ddl=create_table)
    db_stream_consumer = DbStreamConsumer(conn2)

    db_stream_consumer.start_replication().start()
    db_activity_simulator.start()
    db_activity_simulator.join_or_fail(timeout=3)

    db_stream_consumer.join_or_fail(timeout=3)

    pprint(db_stream_consumer.payloads_parsed, indent=4, sort_dicts=True, compact=False)

    expected = [
        {"action": "B"},
        {"action": "C"},
        {"action": "B"},
        {
            "action": "I",
            "columns": [
                {"name": "pk", "type": "integer", "value": 1},
                {"name": "name", "type": "character varying", "value": "this-is-the-value-1"},
            ],
            "schema": "public",
            "table": table_name.lower(),
        },
        {"action": "C"},
        {"action": "B"},
        {
            "action": "I",
            "columns": [
                {"name": "pk", "type": "integer", "value": 2},
                {"name": "name", "type": "character varying", "value": "this-is-the-value-2"},
            ],
            "schema": "public",
            "table": table_name.lower(),
        },
        {"action": "C"},
        {"action": "B"},
        {"action": "T", "schema": "public", "table": table_name.lower()},
        {"action": "C"},
        {"action": "B"},
        {
            "action": "I",
            "columns": [
                {"name": "pk", "type": "integer", "value": 3},
                {"name": "name", "type": "character varying", "value": "after-truncate"},
            ],
            "schema": "public",
            "table": table_name.lower(),
        },
        {"action": "C"},
        {"action": "B"},
        {
            "action": "D",
            "identity": [{"name": "pk", "type": "integer", "value": 3}],
            "schema": "public",
            "table": table_name.lower(),
        },
        {"action": "C"},
    ]

    assert db_stream_consumer.payloads_parsed == expected


def test_manual_transaction_handling(conn: Connection, conn2: Connection, drop_slot, table_name: str):
    """
    This not only tests wal2json, but also tx handling done by DbActivitySimulator.
    """
    statements = [
        "BEGIN",
        "INSERT INTO __table_name__ (NAME) VALUES ('this-is-the-value-1')",
        "INSERT INTO __table_name__ (NAME) VALUES ('this-is-the-value-2')",
        "COMMIT",
        "BEGIN",
        "INSERT INTO __table_name__ (NAME) VALUES ('this-is-the-value-3')",
        "INSERT INTO __table_name__ (NAME) VALUES ('this-is-the-value-4')",
        "ROLLBACK",
        "INSERT INTO __table_name__ (NAME) VALUES ('this-is-the-value-5')",
    ]

    create_table = f"""
    CREATE TABLE {table_name} (
        pk serial not null primary key,
        name varchar not null
    )
    """

    db_activity_simulator = DbActivitySimulator(conn, table_name, statements, create_table_ddl=create_table)
    db_stream_consumer = DbStreamConsumer(conn2)

    db_stream_consumer.start_replication().start()
    db_activity_simulator.start()
    db_activity_simulator.join_or_fail(timeout=3)

    db_stream_consumer.join_or_fail(timeout=3)

    pprint(db_stream_consumer.payloads_parsed, indent=4, sort_dicts=True, compact=False)

    expected = [
        {"action": "B"},
        {"action": "C"},
        {"action": "B"},
        {
            "action": "I",
            "columns": [
                {"name": "pk", "type": "integer", "value": 1},
                {"name": "name", "type": "character varying", "value": "this-is-the-value-1"},
            ],
            "schema": "public",
            "table": table_name.lower(),
        },
        {
            "action": "I",
            "columns": [
                {"name": "pk", "type": "integer", "value": 2},
                {"name": "name", "type": "character varying", "value": "this-is-the-value-2"},
            ],
            "schema": "public",
            "table": table_name.lower(),
        },
        {"action": "C"},
        {"action": "B"},
        {
            "action": "I",
            "columns": [
                {"name": "pk", "type": "integer", "value": 5},
                {"name": "name", "type": "character varying", "value": "this-is-the-value-5"},
            ],
            "schema": "public",
            "table": table_name.lower(),
        },
        {"action": "C"},
    ]

    assert db_stream_consumer.payloads_parsed == expected


def test_no_db_activity(conn: Connection, conn2: Connection, drop_slot, table_name: str):
    statements = ["SELECT 1"]

    db_activity_simulator = DbActivitySimulator(conn, table_name, statements)
    db_stream_consumer = DbStreamConsumer(conn2)

    db_stream_consumer.start_replication().start()
    db_activity_simulator.start()
    db_activity_simulator.join_or_fail(timeout=3)

    db_stream_consumer.join_or_fail(timeout=3)

    pprint(db_stream_consumer.payloads_parsed, indent=4, sort_dicts=True, compact=False)

    expected = [{"action": "B"}, {"action": "C"}]

    assert db_stream_consumer.payloads_parsed == expected


class TestPgLogicalEmitMessage:
    """
    About `pg_logical_emit_message ( transactional boolean, prefix text, content text ) → pg_lsn`:

    Emits a logical decoding message.
    This can be used to pass generic messages to logical decoding plugins through WAL.

    * The `transactional` parameter specifies if the message should be part of the current transaction,
    or if it should be written immediately and decoded as soon as the logical decoder reads the record.

    * The `prefix` parameter is a textual prefix that can be used by logical decoding plugins to
    easily recognize messages that are interesting for them.

    * The `content` parameter is the content of the message, given either in text or binary form.
    """

    def test_emit_non_transactional(self, conn: Connection, conn2: Connection, drop_slot, table_name: str):
        statements = [
            "BEGIN",
            "SELECT * FROM pg_logical_emit_message(FALSE, 'this-is-prefix', 'content-1')",
            "ROLLBACK",
            "BEGIN",
            "SELECT * FROM pg_logical_emit_message(FALSE, 'this-is-prefix', 'content-2')",
            "COMMIT",
        ]

        db_activity_simulator = DbActivitySimulator(conn, table_name, statements)
        db_stream_consumer = DbStreamConsumer(conn2)

        db_stream_consumer.start_replication().start()
        db_activity_simulator.start()
        db_activity_simulator.join_or_fail(timeout=3)

        db_stream_consumer.join_or_fail(timeout=3)

        pprint(db_stream_consumer.payloads_parsed, indent=4, sort_dicts=True, compact=False)

        expected = [
            {"action": "B"},
            {"action": "C"},
            {"action": "M", "content": "content-1", "prefix": "this-is-prefix", "transactional": False},
            {"action": "M", "content": "content-2", "prefix": "this-is-prefix", "transactional": False},
        ]

        assert db_stream_consumer.payloads_parsed == expected

    def test_emit_transactional(self, conn: Connection, conn2: Connection, drop_slot, table_name: str):
        statements = [
            "BEGIN",
            "SELECT * FROM pg_logical_emit_message(TRUE, 'this-is-prefix', 'content-1')",
            "ROLLBACK",
            "BEGIN",
            "SELECT * FROM pg_logical_emit_message(TRUE, 'this-is-prefix', 'content-2')",
            "COMMIT",
        ]

        db_activity_simulator = DbActivitySimulator(conn, table_name, statements)
        db_stream_consumer = DbStreamConsumer(conn2)

        db_stream_consumer.start_replication().start()
        db_activity_simulator.start()
        db_activity_simulator.join_or_fail(timeout=3)

        db_stream_consumer.join_or_fail(timeout=3)

        pprint(db_stream_consumer.payloads_parsed, indent=4, sort_dicts=True, compact=False)

        expected = [
            {"action": "B"},
            {"action": "C"},
            {"action": "B"},
            {"action": "M", "content": "content-2", "prefix": "this-is-prefix", "transactional": True},
            {"action": "C"},
        ]

        assert db_stream_consumer.payloads_parsed == expected


@dataclasses.dataclass
class AllScenarios:
    table_name_no_pk: str
    table_name_pk: str
    table_name_composite_key: str
    create_table_ddl: str
    statements: list
    expected: list


@pytest.fixture
def all_scenarios() -> AllScenarios:
    table_name_no_pk = f"test_table_no_pk_{uuid.uuid4().hex}".upper()
    table_name_pk = f"test_table_pk_{uuid.uuid4().hex}".upper()
    table_name_composite_key = f"test_table_composite_key_{uuid.uuid4().hex}".upper()

    statements = [
        # --- crud w/o pk
        f"INSERT INTO {table_name_no_pk} (NAME) VALUES ('this-is-the-value-1')",
        f"INSERT INTO {table_name_no_pk} (NAME) VALUES ('this-is-the-value-2')",
        f"INSERT INTO {table_name_no_pk} (NAME) VALUES ('this-is-the-value-3')",
        f"INSERT INTO {table_name_no_pk} (NAME) VALUES ('this-is-the-value-4')",
        f"UPDATE {table_name_no_pk} SET NAME = 'this-is-the-value-4-new' WHERE NAME = 'this-is-the-value-4'",
        f"DELETE FROM {table_name_no_pk} WHERE NAME = 'this-is-the-value-4-new'",
        # --- crud w/pk
        f"INSERT INTO {table_name_pk} (NAME) VALUES ('this-is-the-value-1')",
        f"INSERT INTO {table_name_pk} (NAME) VALUES ('this-is-the-value-2')",
        f"INSERT INTO {table_name_pk} (PK, NAME) VALUES (98, 'this-is-the-value-3')",
        f"INSERT INTO {table_name_pk} (PK, NAME) VALUES (99, 'this-is-the-value-4')",
        f"UPDATE {table_name_pk} SET NAME = 'this-is-the-value-3-new' WHERE PK = 98",
        f"UPDATE {table_name_pk} SET NAME = 'this-is-the-value-4-new' WHERE NAME = 'this-is-the-value-4'",
        f"DELETE FROM {table_name_pk} WHERE PK IN (2, 98)",
        # --- truncate
        f"TRUNCATE TABLE {table_name_no_pk}",
        f"TRUNCATE TABLE {table_name_pk}",
        # --- composite pk
        f"INSERT INTO {table_name_composite_key} (NAME) VALUES ('this-is-the-value-1')",
        f"INSERT INTO {table_name_composite_key} (NAME) VALUES ('this-is-the-value-2')",
        f"INSERT INTO {table_name_composite_key} (ID_1, ID_2, NAME) VALUES (98, 98, 'this-is-the-value-3')",
        f"INSERT INTO {table_name_composite_key} (ID_1, ID_2, NAME) VALUES (99, 99, 'this-is-the-value-4')",
        f"UPDATE {table_name_composite_key} SET NAME = 'this-is-the-value-3-new' WHERE ID_1 = 98 AND ID_2 = 98",
        f"UPDATE {table_name_composite_key} SET NAME = 'this-is-the-value-4-new' WHERE NAME = 'this-is-the-value-4'",
        f"DELETE FROM {table_name_composite_key} WHERE ID_1 = 98 AND ID_2 = 98",
        # --- pg_logical_emit_message() non-tx
        "BEGIN",
        "SELECT * FROM pg_logical_emit_message(FALSE, 'this-is-prefix', 'content-1')",
        "ROLLBACK",
        "BEGIN",
        "SELECT * FROM pg_logical_emit_message(FALSE, 'this-is-prefix', 'content-2')",
        "COMMIT",
        # --- pg_logical_emit_message() tx
        "BEGIN",
        "SELECT * FROM pg_logical_emit_message(TRUE, 'this-is-prefix', 'content-3')",
        "ROLLBACK",
        "BEGIN",
        "SELECT * FROM pg_logical_emit_message(TRUE, 'this-is-prefix', 'content-4')",
        "COMMIT",
    ]

    create_table = f"""
    CREATE TABLE {table_name_no_pk} (
        name varchar not null
    );
    CREATE TABLE {table_name_pk} (
        pk serial not null primary key,
        name varchar not null
    );
    CREATE TABLE {table_name_composite_key} (
        id_1 serial not null,
        id_2 serial not null,
        name varchar not null,
        primary key (id_1, id_2)
    );
    """

    expected = [
        {"action": "B"},
        {"action": "C"},
        {"action": "B"},
        {
            "action": "I",
            "columns": [{"name": "name", "type": "character varying", "value": "this-is-the-value-1"}],
            "schema": "public",
            "table": table_name_no_pk.lower(),
        },
        {"action": "C"},
        {"action": "B"},
        {
            "action": "I",
            "columns": [{"name": "name", "type": "character varying", "value": "this-is-the-value-2"}],
            "schema": "public",
            "table": table_name_no_pk.lower(),
        },
        {"action": "C"},
        {"action": "B"},
        {
            "action": "I",
            "columns": [{"name": "name", "type": "character varying", "value": "this-is-the-value-3"}],
            "schema": "public",
            "table": table_name_no_pk.lower(),
        },
        {"action": "C"},
        {"action": "B"},
        {
            "action": "I",
            "columns": [{"name": "name", "type": "character varying", "value": "this-is-the-value-4"}],
            "schema": "public",
            "table": table_name_no_pk.lower(),
        },
        {"action": "C"},
        {"action": "B"},
        {"action": "C"},
        {"action": "B"},
        {"action": "C"},
        {"action": "B"},
        {
            "action": "I",
            "columns": [
                {"name": "pk", "type": "integer", "value": 1},
                {"name": "name", "type": "character varying", "value": "this-is-the-value-1"},
            ],
            "schema": "public",
            "table": table_name_pk.lower(),
        },
        {"action": "C"},
        {"action": "B"},
        {
            "action": "I",
            "columns": [
                {"name": "pk", "type": "integer", "value": 2},
                {"name": "name", "type": "character varying", "value": "this-is-the-value-2"},
            ],
            "schema": "public",
            "table": table_name_pk.lower(),
        },
        {"action": "C"},
        {"action": "B"},
        {
            "action": "I",
            "columns": [
                {"name": "pk", "type": "integer", "value": 98},
                {"name": "name", "type": "character varying", "value": "this-is-the-value-3"},
            ],
            "schema": "public",
            "table": table_name_pk.lower(),
        },
        {"action": "C"},
        {"action": "B"},
        {
            "action": "I",
            "columns": [
                {"name": "pk", "type": "integer", "value": 99},
                {"name": "name", "type": "character varying", "value": "this-is-the-value-4"},
            ],
            "schema": "public",
            "table": table_name_pk.lower(),
        },
        {"action": "C"},
        {"action": "B"},
        {
            "action": "U",
            "columns": [
                {"name": "pk", "type": "integer", "value": 98},
                {"name": "name", "type": "character varying", "value": "this-is-the-value-3-new"},
            ],
            "identity": [{"name": "pk", "type": "integer", "value": 98}],
            "schema": "public",
            "table": table_name_pk.lower(),
        },
        {"action": "C"},
        {"action": "B"},
        {
            "action": "U",
            "columns": [
                {"name": "pk", "type": "integer", "value": 99},
                {"name": "name", "type": "character varying", "value": "this-is-the-value-4-new"},
            ],
            "identity": [{"name": "pk", "type": "integer", "value": 99}],
            "schema": "public",
            "table": table_name_pk.lower(),
        },
        {"action": "C"},
        {"action": "B"},
        {
            "action": "D",
            "identity": [{"name": "pk", "type": "integer", "value": 2}],
            "schema": "public",
            "table": table_name_pk.lower(),
        },
        {
            "action": "D",
            "identity": [{"name": "pk", "type": "integer", "value": 98}],
            "schema": "public",
            "table": table_name_pk.lower(),
        },
        {"action": "C"},
        {"action": "B"},
        {"action": "T", "schema": "public", "table": table_name_no_pk.lower()},
        {"action": "C"},
        {"action": "B"},
        {"action": "T", "schema": "public", "table": table_name_pk.lower()},
        {"action": "C"},
        {"action": "B"},
        {
            "action": "I",
            "columns": [
                {"name": "id_1", "type": "integer", "value": 1},
                {"name": "id_2", "type": "integer", "value": 1},
                {"name": "name", "type": "character varying", "value": "this-is-the-value-1"},
            ],
            "schema": "public",
            "table": table_name_composite_key.lower(),
        },
        {"action": "C"},
        {"action": "B"},
        {
            "action": "I",
            "columns": [
                {"name": "id_1", "type": "integer", "value": 2},
                {"name": "id_2", "type": "integer", "value": 2},
                {"name": "name", "type": "character varying", "value": "this-is-the-value-2"},
            ],
            "schema": "public",
            "table": table_name_composite_key.lower(),
        },
        {"action": "C"},
        {"action": "B"},
        {
            "action": "I",
            "columns": [
                {"name": "id_1", "type": "integer", "value": 98},
                {"name": "id_2", "type": "integer", "value": 98},
                {"name": "name", "type": "character varying", "value": "this-is-the-value-3"},
            ],
            "schema": "public",
            "table": table_name_composite_key.lower(),
        },
        {"action": "C"},
        {"action": "B"},
        {
            "action": "I",
            "columns": [
                {"name": "id_1", "type": "integer", "value": 99},
                {"name": "id_2", "type": "integer", "value": 99},
                {"name": "name", "type": "character varying", "value": "this-is-the-value-4"},
            ],
            "schema": "public",
            "table": table_name_composite_key.lower(),
        },
        {"action": "C"},
        {"action": "B"},
        {
            "action": "U",
            "columns": [
                {"name": "id_1", "type": "integer", "value": 98},
                {"name": "id_2", "type": "integer", "value": 98},
                {"name": "name", "type": "character varying", "value": "this-is-the-value-3-new"},
            ],
            "identity": [
                {"name": "id_1", "type": "integer", "value": 98},
                {"name": "id_2", "type": "integer", "value": 98},
            ],
            "schema": "public",
            "table": table_name_composite_key.lower(),
        },
        {"action": "C"},
        {"action": "B"},
        {
            "action": "U",
            "columns": [
                {"name": "id_1", "type": "integer", "value": 99},
                {"name": "id_2", "type": "integer", "value": 99},
                {"name": "name", "type": "character varying", "value": "this-is-the-value-4-new"},
            ],
            "identity": [
                {"name": "id_1", "type": "integer", "value": 99},
                {"name": "id_2", "type": "integer", "value": 99},
            ],
            "schema": "public",
            "table": table_name_composite_key.lower(),
        },
        {"action": "C"},
        {"action": "B"},
        {
            "action": "D",
            "identity": [
                {"name": "id_1", "type": "integer", "value": 98},
                {"name": "id_2", "type": "integer", "value": 98},
            ],
            "schema": "public",
            "table": table_name_composite_key.lower(),
        },
        {"action": "C"},
        {"action": "M", "content": "content-1", "prefix": "this-is-prefix", "transactional": False},
        {"action": "M", "content": "content-2", "prefix": "this-is-prefix", "transactional": False},
        {"action": "B"},
        {"action": "M", "content": "content-4", "prefix": "this-is-prefix", "transactional": True},
        {"action": "C"},
    ]

    return AllScenarios(
        table_name_no_pk=table_name_no_pk,
        table_name_pk=table_name_pk,
        table_name_composite_key=table_name_composite_key,
        create_table_ddl=create_table,
        statements=statements,
        expected=expected,
    )


def test_all(conn: Connection, conn2: Connection, drop_slot, all_scenarios: AllScenarios):
    db_activity_simulator = DbActivitySimulator(
        conn, f"ignore_{uuid.uuid4().hex}", all_scenarios.statements, create_table_ddl=all_scenarios.create_table_ddl
    )
    db_stream_consumer = DbStreamConsumer(conn2)
    db_stream_consumer.start_replication().start()
    db_activity_simulator.start()
    db_activity_simulator.join_or_fail(timeout=3)
    db_stream_consumer.join_or_fail(timeout=3)

    pprint(db_stream_consumer.payloads_parsed, indent=4, sort_dicts=True, compact=False)

    assert db_stream_consumer.payloads_parsed == all_scenarios.expected
