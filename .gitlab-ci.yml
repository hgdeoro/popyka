# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Python.gitlab-ci.yml
variables:
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"
  PRE_COMMIT_HOME: "$CI_PROJECT_DIR/.cache/pre-commit"
  CI_POSTGRES12: "${CI_REGISTRY_IMAGE}:ci-postgres12-v1"
  #CI_POSTGRES13: "${CI_REGISTRY_IMAGE}:ci-postgres13-v1"
  #CI_POSTGRES14: "${CI_REGISTRY_IMAGE}:ci-postgres14-v1"
  #CI_POSTGRES15: "${CI_REGISTRY_IMAGE}:ci-postgres15-v1"
  CI_POSTGRES16: "${CI_REGISTRY_IMAGE}:ci-postgres16-v1"

stages: [lint, test, build, release]

lint:
  image: python:3.12
  stage: lint
  before_script:
    - which python ; python --version ; pip --version  # For debugging
    - python -m venv venv
    - source venv/bin/activate
    - pip install pip-tools pre-commit
    - pip-sync reqs/requirements-prod.txt reqs/requirements-dev.txt
  script:
    - pre-commit run -a
  cache:
    - key:
        files:
          - reqs/requirements-dev.txt
          - reqs/requirements-prod.txt
      paths:
        - .cache/pip
    - key:
        files:
          - .pre-commit-config.yaml
      paths:
        - .cache/pre-commit

build-ci-pg12:
  stage: build
  image: quay.io/buildah/stable
  variables:
    STORAGE_DRIVER: vfs
    BUILDAH_FORMAT: docker
  before_script:
    - echo "$CI_REGISTRY_PASSWORD" | buildah login -u "$CI_REGISTRY_USER" --password-stdin $CI_REGISTRY
  script:
    - buildah pull $CI_POSTGRES12 || touch .need-ci-postgres12
    - test -e .need-ci-postgres12 && buildah build -t $CI_POSTGRES12 -f postgres12-wal2json/Dockerfile tests/docker || true
    - test -e .need-ci-postgres12 && buildah push     $CI_POSTGRES12                                                || true
  rules:
    - if: $CI_COMMIT_BRANCH == 'ci-postgres-images'

#build-ci-pg13:
#  stage: build
#  image: quay.io/buildah/stable
#  variables:
#    STORAGE_DRIVER: vfs
#    BUILDAH_FORMAT: docker
#  before_script:
#    - echo "$CI_REGISTRY_PASSWORD" | buildah login -u "$CI_REGISTRY_USER" --password-stdin $CI_REGISTRY
#  script:
#    - buildah pull $CI_POSTGRES13 || touch .need-ci-postgres13
#    - test -e .need-ci-postgres13 && buildah build -t $CI_POSTGRES13 -f postgres13-wal2json/Dockerfile tests/docker || true
#    - test -e .need-ci-postgres13 && buildah push     $CI_POSTGRES13                                                || true
#  rules:
#    - if: $CI_COMMIT_BRANCH == 'ci-postgres-images'
#
#build-ci-pg14:
#  stage: build
#  image: quay.io/buildah/stable
#  variables:
#    STORAGE_DRIVER: vfs
#    BUILDAH_FORMAT: docker
#  before_script:
#    - echo "$CI_REGISTRY_PASSWORD" | buildah login -u "$CI_REGISTRY_USER" --password-stdin $CI_REGISTRY
#  script:
#    - buildah pull $CI_POSTGRES14 || touch .need-ci-postgres14
#    - test -e .need-ci-postgres14 && buildah build -t $CI_POSTGRES14 -f postgres14-wal2json/Dockerfile tests/docker || true
#    - test -e .need-ci-postgres14 && buildah push     $CI_POSTGRES14                                                || true
#  rules:
#    - if: $CI_COMMIT_BRANCH == 'ci-postgres-images'
#
#build-ci-pg15:
#  stage: build
#  image: quay.io/buildah/stable
#  variables:
#    STORAGE_DRIVER: vfs
#    BUILDAH_FORMAT: docker
#  before_script:
#    - echo "$CI_REGISTRY_PASSWORD" | buildah login -u "$CI_REGISTRY_USER" --password-stdin $CI_REGISTRY
#  script:
#    - buildah pull $CI_POSTGRES15 || touch .need-ci-postgres15
#    - test -e .need-ci-postgres15 && buildah build -t $CI_POSTGRES15 -f postgres15-wal2json/Dockerfile tests/docker || true
#    - test -e .need-ci-postgres15 && buildah push     $CI_POSTGRES15                                                || true
#  rules:
#    - if: $CI_COMMIT_BRANCH == 'ci-postgres-images'

build-ci-pg16:
  stage: build
  image: quay.io/buildah/stable
  variables:
    STORAGE_DRIVER: vfs
    BUILDAH_FORMAT: docker
  before_script:
    - echo "$CI_REGISTRY_PASSWORD" | buildah login -u "$CI_REGISTRY_USER" --password-stdin $CI_REGISTRY
  script:
    - buildah pull $CI_POSTGRES16 || touch .need-ci-postgres16
    - test -e .need-ci-postgres16 && buildah build -t $CI_POSTGRES16 -f postgres16-wal2json/Dockerfile tests/docker || true
    - test -e .need-ci-postgres16 && buildah push     $CI_POSTGRES16                                                || true
  rules:
    - if: $CI_COMMIT_BRANCH == 'ci-postgres-images'

unit-test:
  image: python:3.12
  stage: test
  before_script:
    - which python ; python --version ; pip --version  # For debugging
    - python -m venv venv
    - source venv/bin/activate
    - pip install pip-tools
    - pip-sync reqs/requirements-prod.txt reqs/requirements-dev.txt
  script:
    - pytest --cov=popyka/ --cov-report term --cov-report html --cov-report xml:coverage.xml --cov-branch tests/unit_tests/
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml
  cache:
    - key:
        files:
          - reqs/requirements-dev.txt
          - reqs/requirements-prod.txt
      paths:
        - .cache/pip

test-py310-pg12:
  image: python:3.10
  stage: test
  services:
    - name: $CI_POSTGRES12
      alias: ci-postgres12
      command: ["-c", "wal_level=logical", "-c", "max_wal_senders=10", "-c", "max_replication_slots=10"]
    - name: bitnami/kafka:3.5
      alias: kafka
      variables:
        KAFKA_CFG_NODE_ID: "0"
        KAFKA_CFG_PROCESS_ROLES: "controller,broker"
        KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: "0@kafka:9093"
        KAFKA_CFG_CONTROLLER_LISTENER_NAMES: "CONTROLLER"
        KAFKA_CFG_LISTENERS: "PLAINTEXT://:9092,CONTROLLER://:9093"
        KAFKA_CFG_ADVERTISED_LISTENERS: "PLAINTEXT://kafka:9092"
        KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: "CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT"
  variables:
    # GitLab
    FF_NETWORK_PER_BUILD: "1"  # allow service containers to reach each other
    # PostgreSql
    POSTGRES_PASSWORD: pass
    POSTGRES_HOST_AUTH_METHOD: trust
    # Popyka
    OVERRIDE_HOST: "ci-postgres12"
    OVERRIDE_PORT: "5432"
    OVERRIDE_KAFKA_BOOTSTRAP_SERVERS: "kafka:9092"
    EXPLORATION_TEST: "1"
    CONTRACT_TEST: "1"
    SLOW_TEST: "1"
    SYSTEM_TEST_FAST: "1"
  before_script:
    - which python ; python --version ; pip --version  # For debugging
    - python -m venv venv
    - source venv/bin/activate
    - pip install pip-tools
    - pip-sync reqs/requirements-prod.txt reqs/requirements-dev.txt
  script:
    - pytest -v tests/functional_tests/ tests/exploration_tests/ tests/contract_tests/ tests/system_tests/
  cache:
    - key:
        files:
          - reqs/requirements-dev.txt
          - reqs/requirements-prod.txt
        prefix: py310
      paths:
        - .cache/pip

test-py312-pg16:
  image: python:3.12
  stage: test
  services:
    - name: $CI_POSTGRES16
      alias: ci-postgres16
      command: ["-c", "wal_level=logical", "-c", "max_wal_senders=10", "-c", "max_replication_slots=10"]
    - name: bitnami/kafka:3.5
      alias: kafka
      variables:
        KAFKA_CFG_NODE_ID: "0"
        KAFKA_CFG_PROCESS_ROLES: "controller,broker"
        KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: "0@kafka:9093"
        KAFKA_CFG_CONTROLLER_LISTENER_NAMES: "CONTROLLER"
        KAFKA_CFG_LISTENERS: "PLAINTEXT://:9092,CONTROLLER://:9093"
        KAFKA_CFG_ADVERTISED_LISTENERS: "PLAINTEXT://kafka:9092"
        KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: "CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT"
  variables:
    # GitLab
    FF_NETWORK_PER_BUILD: "1"  # allow service containers to reach each other
    # PostgreSql
    POSTGRES_PASSWORD: pass
    POSTGRES_HOST_AUTH_METHOD: trust
    # Popyka
    OVERRIDE_HOST: "ci-postgres16"
    OVERRIDE_PORT: "5432"
    OVERRIDE_KAFKA_BOOTSTRAP_SERVERS: "kafka:9092"
    EXPLORATION_TEST: "1"
    CONTRACT_TEST: "1"
    SLOW_TEST: "1"
    SYSTEM_TEST_FAST: "1"
  before_script:
    - which python ; python --version ; pip --version  # For debugging
    - python -m venv venv
    - source venv/bin/activate
    - pip install pip-tools
    - pip-sync reqs/requirements-prod.txt reqs/requirements-dev.txt
  script:
    - pytest -v tests/functional_tests/ tests/exploration_tests/ tests/contract_tests/ tests/system_tests/
  cache:
    - key:
        files:
          - reqs/requirements-dev.txt
          - reqs/requirements-prod.txt
      paths:
        - .cache/pip

release:
  stage: release
  image: quay.io/buildah/stable
  variables:
    # Use vfs with buildah. Docker offers overlayfs as a default, but Buildah
    # cannot stack overlayfs on top of another overlayfs filesystem.
    STORAGE_DRIVER: vfs
    # Write all image metadata in the docker format, not the standard OCI format.
    # Newer versions of docker can handle the OCI format, but older versions, like
    # the one shipped with Fedora 30, cannot handle the format.
    BUILDAH_FORMAT: docker
  before_script:
    # Let's double-check, make sure we have 'CI_COMMIT_TAG'
    - 'test -n "${CI_COMMIT_TAG}" || { echo "ERROR: CI_COMMIT_TAG is empty?" ; exit 9; }'
    # GitLab container registry credentials taken from the
    # [predefined CI/CD variables](../variables/index.md#predefined-cicd-variables)
    # to authenticate to the registry.
    - echo "$CI_REGISTRY_PASSWORD" | buildah login -u "$CI_REGISTRY_USER" --password-stdin $CI_REGISTRY
  script:
    - buildah images
    - buildah build -t $CI_REGISTRY_IMAGE:$CI_COMMIT_TAG
    - buildah images
    - buildah push $CI_REGISTRY_IMAGE:$CI_COMMIT_TAG
  rules:
    - if: $CI_COMMIT_TAG
    # - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
